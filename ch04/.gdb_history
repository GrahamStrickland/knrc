run
break 56
run
list
print a
print vars[0]
print vars
print buf[0]
print type
print s[0]
addvar(s[0], pop())
print vars
print s[1]
print s[2]
print s[1]
print s[0]
p s[0]
p s
p vars
p type
backtrace
up
down
n
list
p type
p s[0]
p s[1]
p s[2]
call addvar(s[0], pop())
p s
call pop()
p s
call push(4)
call push('a')
addvar(s[0], pop())
call addvar(s[0], pop())
p vars
p s
p vals
p val
p (double)vals
p (double)val
p (double)val[0]
p (double)vars
p s[0]
quit
run
ls
quit
quit
run
set break 57
break 57
run
print (int)vals
print (int)val
print (int)val[0]
p val
p (int)val
p (double)val
p (char)buf
p (double)vars
p (double)vars+1
p (double)(vars+1)
p (double)(val+1)
p (double)val
p 'val[0]'
p val
p *val@1
p *(double)val@1
p *(double)val@0
p (double)val
p 'val[0]'
p 'val[1]'
p 'val'
p (double)'val[0]'
print (double*)val
print (double*)val[0]
print (double*)val
print (double*)vars
p -array val
p -array on val
print -array on val
print -array -- val
print -array -- (double)val
print -array -- (double*)val
p (double *)val@2
p (double *)val
p (double)val@2
p (double[])val
p (double[2])val
p (double[3])val
p (double[4])val
p (double[4])vars
p (double[26])vars
quit
